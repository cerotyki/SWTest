#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

char map[50][50];
int cnt[50][50];
int N;
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,-1,1 };
struct xy { int x, y; };
int ans = 10000000;

int main() {
	cin >> N;

	for (int i = 0; i < N; i++) {
			cin >> map[i];
			for (int j = 0; j < N; j++)
				cnt[i][j] = -1;
	}

	queue<xy> q;

	q.push({ 0,0 });
	cnt[0][0] = 0;

	while (!q.empty()) {
		int cx = q.front().x, cy = q.front().y;
		q.pop();

		queue<xy> q2;
		q2.push({ cx, cy });

		while (!q2.empty()) {
			int x = q2.front().x, y = q2.front().y;
			q2.pop();

			for (int i = 4; i--; ) {
				int nx = x + dx[i], ny = y + dy[i];
				if (nx >= 0 && nx < N && ny >= 0 && ny < N && map[nx][ny] == '1' && cnt[nx][ny] == -1) {
					cnt[nx][ny] = cnt[x][y];
					q2.push({ nx, ny });
				}
				if (nx >= 0 && nx < N && ny >= 0 && ny < N && cnt[nx][ny] == -1) {
					cnt[nx][ny] = cnt[x][y] + 1;
					q.push({ nx, ny });
				}
				// q.push( ??? )
			}
		}
	}

	cout << cnt[N-1][N-1] << endl;

	return 0;
}
