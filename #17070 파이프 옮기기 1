#include <iostream>
#include <stack>
using namespace std;

int map[18][18];
int N;
int found=0;
struct pipe { int type, x, y; };
stack<pipe> pipes;
int dx[]{ 0,1,1 };
int dy[]{ 1,0,1 };

void dfs() {

	int type = pipes.top().type, sx = pipes.top().x, sy = pipes.top().y;
	pipes.pop();

	int ex = sx + dx[type], ey = sy + dy[type];

	if (ex == N && ey == N) {
		found++;
		return;
	}

	if (ex > N || ey > N)
		return;

	switch (type) {
	case 0: 
		if (!map[ex][ey + 1] && ey+1 <= N) pipes.push({ 0,ex,ey });
		if (!map[ex][ey + 1] && !map[ex + 1][ey] && !map[ex + 1][ey + 1] && ey+1 <= N && ex+1 <= N) pipes.push({ 2,ex,ey });
		break;
	case 1:
		if (!map[ex+1][ey] && ex+1 <= N) pipes.push({ 1,ex,ey });
		if (!map[ex][ey + 1] && !map[ex + 1][ey] && !map[ex + 1][ey + 1] && ey + 1 <= N && ex + 1 <= N) pipes.push({ 2,ex,ey });
		break;
	case 2:
		if (!map[ex][ey + 1] && ey + 1 <= N) pipes.push({ 0,ex,ey });
		if (!map[ex + 1][ey] && ex + 1 <= N) pipes.push({ 1,ex,ey });
		if (!map[ex][ey + 1] && !map[ex + 1][ey] && !map[ex + 1][ey + 1] && ey + 1 <= N && ex + 1 <= N) pipes.push({ 2,ex,ey });
		break;
	}
	return;
}


int main() {
	cin >> N;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++)
			cin >> map[i][j];
	}

	pipes.push({ 0,1,1 });

	while(!pipes.empty())
	dfs();
	
	cout << found << endl;

	return 0;
}
