#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int dist[20001];
struct edge { int to, dist; };
vector<edge> e[20001];
int V, E, K;

priority_queue<pair<int, int>> q;

int main() {

	scanf("%d%d%d", &V, &E, &K);

	for (int i = 1; i <= V; i++)
		dist[i] = 1000000;

	for (int i = 0; i < E; i++) {
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		e[u].push_back({ v, w });
	}

	dist[K] = 0;

	q.push({ 0, K });

	while (!q.empty()) {
		pair<int, int> now = q.top();
		q.pop();
		if (-now.first != dist[now.second]) continue;

		for (int i = 0; i < e[now.second].size(); i++) {
			int curdist = dist[e[now.second][i].to];
			int candist = -now.first + e[now.second][i].dist;
			if (curdist > candist) {
				dist[e[now.second][i].to] = candist;
				q.push({ -candist, e[now.second][i].to });
			}
		}

	}

	for (int i = 1; i <= V; i++) {
		if (dist[i] != 1000000)
			printf("%d\n", dist[i]);
		else
			puts("INF");
	}

	return 0;
}
